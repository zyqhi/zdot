" vim setting

function LoadBasicSettings()
    syntax enable               " enable syntax processing

    " allow backspacing over everything in insert mode
    set backspace=indent,eol,start
    
    " Spaces and Tabs
    set tabstop=4               " number of visual spaces per TAB
    set softtabstop=4           " number of spaces in tab when editing
    set expandtab               " tabs are spaces
    set shiftwidth=4

    " Vim UI Config
    set number         " show line numbers
    set showcmd        " show command in bottom bar
    set cursorline     " highlight current line
    set wildmenu       " visual autocomplete for command menu
    set lazyredraw     " redraw only when we need to
    set showmatch      " highlight matching [{()}]

    " Searching
    set incsearch " search as characters are entered
    set hlsearch  " highlight matches

    " Movement
    "" move vertically by visual line 
    nnoremap j gj 
    nnoremap k gk
    " 设定文件浏览器目录为当前目录  
    set bsdir=buffer  
    " 设置编码  
    set enc=utf-8  
    " 设置文件编码  
    set fenc=utf-8  
    " 设置文件编码检测类型及支持格式  
    set fencs=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936

    "忽略大小写查找
    set ic

    set nocompatible               " be iMproved
    filetype off                   " required!
    filetype indent on " load filetype-specific indent files
    filetype plugin indent on

endfunction

function LoadVimBundles()
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " 包管理器
    Plugin 'gmarik/vundle'

    " 状态栏增强
    " Plugin 'Lokaltog/vim-powerline'
    " Plugin 'vim-airline/vim-airline-themes'
    " 主题
    Plugin 'flazz/vim-colorschemes'

    " 写作模式
    Plugin 'junegunn/goyo.vim'

    " 文本搜索，grep加强
    Plugin 'ack.vim'
    Plugin 'rking/ag.vim'

    " 文件浏览
    Plugin 'ctrlp.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'yegappan/mru'

    " 自动补全
    Plugin 'ervandew/supertab'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'

    " 快速移动光标
    Plugin 'Lokaltog/vim-easymotion'
    
    " 注释代码
    Plugin 'comments.vim'
    
    " 语法检测（貌似只针对C/C++）
    Plugin 'scrooloose/syntastic'

    Plugin 'kchmck/vim-coffee-script'
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-haml'

    " JavaScript
    Plugin 'pangloss/vim-javascript'
    Plugin 'jelera/vim-javascript-syntax'

    Plugin 'briancollins/vim-jst'
    " markdown
    Plugin 'plasticboy/vim-markdown'
    Plugin 'sudo.vim'
    Plugin 'xml.vim'
    Plugin 'ZenCoding.vim'
    Plugin 'Yggdroot/indentLine'

    Plugin 'junegunn/limelight.vim'

    Plugin 'vim-scripts/Mark--Karkat'
    Plugin 'vim-scripts/TagHighlight'

    " Plugin 'drmingdrmer/xptemplate'
    Plugin 'wesleyche/SrcExpl'
    Plugin 'vim-scripts/taglist.vim'
    Plugin 'majutsushi/tagbar'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-repeat'

    Plugin 'mtth/locate.vim'
    Plugin 'godlygeek/tabular'
    Plugin 'jiangmiao/auto-pairs'
    Plugin 'reedes/vim-colors-pencil'
    Plugin 'reedes/vim-pencil'
    " Plugin 'bling/vim-airline'
    Plugin 'vim-airline/vim-airline'

    Plugin 'xolox/vim-misc'
    Plugin 'xolox/vim-easytags'
    Plugin 'kien/rainbow_parentheses.vim'

    Plugin 'Shougo/vimshell.vim'
    Plugin 'Shougo/vimproc.vim'

    Plugin 'sjl/gundo.vim'

    Plugin 'dag/vim2hs'
    Plugin 'msanders/cocoa.vim'

    Plugin 'terryma/vim-multiple-cursors'
    Plugin 'keith/swift.vim'

    Plugin 'suan/vim-instant-markdown'

    Plugin 'nightsense/snow'

endfunction

call LoadBasicSettings()
call LoadVimBundles()

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

"auto completed
"RUBY
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

"RUBY plugin
autocmd FileType ruby compiler ruby

"autocmd vimenter * if !argc() | NERDTree | endif
"autocmd VimEnter * NER

let g:vim_markdown_folding_disabled = 1

"set my leader
let mapleader=","
let g:mapleader=","

"tabs
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

"  映射NERDTree插件
":map <leader>n :NERDTree<CR>  
"let loaded_nerd_tree = 1
let NERDTreeQuitOnOpen = 1
let NERDChristmasTree=1
let g:NERDTreeWinSize = 30 
map <leader>f :NERDTreeToggle<CR>
map <leader>j :NERDTreeFind<CR>

"switch window
:map <leader>w <C-W>w

" 把 CTRL-S 映射为 保存,因为这个操作做得太习惯了  
imap <C-S> <C-C>:w<CR>  

"set zen coding
let g:user_zen_settings = {
            \  'php' : {
            \    'extends' : 'html',
            \    'filters' : 'c',
            \  },
            \  'xml' : {
            \    'extends' : 'html',
            \  },
            \  'haml' : {
            \    'extends' : 'html',
            \  },
            \  'erb' : {
            \    'extends' : 'html',
            \  },
            \}
"set CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 2
"use in  edit
imap <C-A> <C-C><c-p>
"use in none edit
:map <leader>t <c-p>
:map <leader>b :CtrlPBuffer<CR>
:map <leader>rf :CtrlPMRUFiles<CR>


:map <leader>o :MRU<CR>

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jpg,*.png,*.gif,*.jpeg,.DS_Store  " MacOSX/Linux
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

" move lines up or down (command - D)
nmap <D-j> mz:m+<cr>`z
nmap <D-k> mz:m-2<cr>`z
vmap <D-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <D-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Tab move lines left or right (c-Ctrl,s-Shift)
nmap    <c-tab>     v>
nmap    <s-tab>     v<
vmap    <c-tab>     >gv
vmap    <s-tab>     <gv

" tab navigation like zsh
:nmap <D-1> :tabprevious<CR>
:map <D-1> :tabprevious<CR>
imap <D-1> <Esc>:tabprevious<CR>i

:nmap <D-2> :tabnext<CR>
:map <D-2> :tabnext<CR>
imap <D-2> <Esc>:tabnext<CR>i

"scss,sass
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.sass set filetype=scss

"let skim use slim syntax
au BufRead,BufNewFile *.skim set filetype=slim

"ctags
" set tags+=~/gitdb/rails/tags
" set tags+=/Users/mutsu/project/up/mpich3/src/mpich-3.1.1/src/tags

"auto completed
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType python nnoremap <buffer> <F5> :exec '!python' shellescape(@%, 1)<cr>
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" code search
let g:ackprg = 'ag --nogroup --nocolor --column'

" let g:agprg="ag --column"

"minitest
set completefunc=syntaxcomplete#Complete

"process paste
set pastetoggle=<F2>
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" set the cursor to a vertical line in insert mode and a solid block
" in command mode
" let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
" let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"


" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
" let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4


" TagHighlight theme setting
hi Class                ctermfg=205   cterm=bold
hi Structure            ctermfg=205   cterm=bold
hi DefinedName          ctermfg=49    cterm=bold
hi Member               ctermfg=244
hi Label                ctermfg=21    cterm=bold
hi EnumerationName      ctermfg=19
hi EnumerationValue     ctermfg=57
hi LocalVariable        ctermfg=100
hi GlobalVariable       ctermfg=93


" Highlight all function names
syntax match cCustomFunc /\w\+\s*(/me=e-1,he=e-1
highlight def link cCustomFunc Function


" clip file name 
" let @* = expand("%")
" yank file name
let @" = expand("%")

" clip file name with full path
" let @* = expand("%p")
" yank file name with full path
let @" = expand("%p")

"" easymotion 
let g:EasyMotion_leader_key = '<Space>'

"" locate
let g:locate_max_height = 20

" airline设置
" set laststatus=2
" 使用powerline打过补丁的字体，gui下会导致中文乱码
if !has('gui_running')
    let g:airline_powerline_fonts = 1
endif

" 开启tabline
" let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
" let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
" let g:airline#extensions#tabline#left_alt_sep = '|'
" tabline中buffer显示编号
" let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>
" airline theme
" let g:airline_theme='dark'

"" 自动注释
set formatoptions+=r

"" 自动改变工作路径为当前打开文件所在路径
autocmd BufEnter * silent! :lcd%:p:h

"" normal mode下tab用于格式化代码
nmap <tab> ==


" let g:indentLine_char = '︙'
let g:indentLine_enabled = 0


let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" enable mouse
set mouse=a

" 以下会导致中文乱码
"augroup pencil
    "autocmd!
    "autocmd FileType markdown,mkd,md call pencil#init()
    "autocmd FileType text            call pencil#init()
"augroup END

" haskell符号美化，没什么用
" let g:haskell_conceal_wide = 1

" 自动注释后添加空格
let NERDSpaceDelims=1

let g:ycm_global_ycm_extra_conf = '/Users/mutsu/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0

" ctrlp自动清除MRU缓存文件
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_use_caching = 0

" 复制粘贴
" vmap <C-x> :!pbcopy<CR>  
" vmap <C-c> :w !pbcopy<CR><CR> 

" vmap <D-x> :!pbcopy<CR>  
" vmap <D-c> :w !pbcopy<CR><CR> 

vmap <leader>x :!pbcopy<CR>  
vmap <leader>c :w !pbcopy<CR><CR> 

" Complete options (disable preview scratch window, longest removed to aways show menu)
set completeopt=menu,menuone

map <leader>s :w<CR>  


function LoadTheme()
    " 两个主题混在一起才好看
    " colorscheme Monokai
    " colorscheme pencil
    if strftime('%H') >= 7 && strftime('%H') < 19
        set background=light
    else
        set background=dark
    endif
    colorscheme snow 
endfunction

call LoadTheme()

